{
	order dynamic_proxy first
}

(cors) {
	# Based off of example from https://kalnytskyi.com/posts/setup-cors-caddy-2/

	@cors_preflight method OPTIONS
	@cors header Origin {args.0}

	handle @cors_preflight {
		header Access-Control-Allow-Origin "{args.0}"
		header Access-Control-Allow-Methods "GET"
		header Access-Control-Allow-Headers "Content-Type"
		header Access-Control-Max-Age "3600"
		respond "" 204
	}

	handle @cors {
		header Access-Control-Allow-Origin "{args.0}"
		header Access-Control-Allow-Credentials true
	}
}

:80 {
	encode zstd gzip
	dynamic_proxy
	import cors {$ALLOW_CORS_FROM}

	@management_api_with_returnto expression {vars.upstream}.startsWith('{$MANAGEMENT_API}') && {vars.returnTo} != ""
	@management_api expression {vars.upstream}.startsWith('{$MANAGEMENT_API}')
	@static_site expression !{vars.upstream}.startsWith('{$MANAGEMENT_API}')
	@clear_query expression {vars.clear_query} == "true"

	# redirect to the management api with a returnTo parameter
	redir @management_api_with_returnto "{vars.upstream}?returnTo={vars.returnTo}"

	# redirect to the management api without a returnTo parameter
	redir @management_api "{vars.upstream}"

	# redirect back to the auth-proxy, but to the path without the query string
	redir @clear_query {path}

	reverse_proxy @static_site {vars.upstream} {
		header_up Host {vars.upstream}
		header_down +Cache-Control "no-store"
	}

	#	log {
	#		output stdout
	#	}
}
